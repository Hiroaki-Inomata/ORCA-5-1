#!%RUBY%

$:.unshift(File.dirname(__FILE__) + "/../monthly/lib")

require "uri"
require "net/https"
require "digest/sha1"

require "orcadas/formdata"
require "orcadas/utils"

module OrcaDAS
  class Command
    def initialize()
      @config = {
        "Host" => "https://orca-das.orca.med.or.jp",
        "PathInf" => "/realtime_infection/upload.cgi",
        "CertificateCAFile" => "/etc/ssl/certs/orca-project-ca-2.crt",
        "User" => "0000102",
        "Password" => "Xinfection"
      }
    end

    def http_request(url, http_method, header, body, config)
      parsed_url = URI.parse(url)
      proxy = ENV["HTTP_PROXY"] || ENV["http_proxy"]
      if proxy
        uri = URI.parse(proxy)
        http = Net::HTTP::Proxy(uri.host,uri.port).new(parsed_url.host, parsed_url.port)
      else
        http = Net::HTTP.new(parsed_url.host, parsed_url.port)
      end
      http.read_timeout = http.open_timeout = config["TimeOut"] || 30
      
      case parsed_url.scheme
      when "https"
        http.use_ssl = true
        http.verify_mode = OpenSSL::SSL::VERIFY_PEER
        if config["CertificateCAFile"]
          http.ca_file = File.expand_path(config["CertificateCAFile"])
        end
      when "http"
        # do nothing
      else
        raise "unexpected URI scheme: #{parsed_url.scheme}"
        return false
      end

      req = case http_method
            when :POST then Net::HTTP::Post.new(parsed_url.path, header)
            when :GET  then Net::HTTP::Get.new(parsed_url.path, header)
            else raise "001 unexpected HTTP method: #{http_method}"
            end

      req["user-agent"] = "#{USER_AGENT}/#{PGVERSION} (#{PGRELDATE})"
      req.basic_auth(config["User"], config["Password"])
      res = http.request(req, body)
      yield(res)
    end

    def http_get(url, header, config=@config, &block)
      http_request(url, :GET, header, nil, config, &block)
    end

    def http_post(url, header, body, config=@config, &block)
      http_request(url, :POST, header, body, config, &block)
    end

    def upload(pathname, filename, config=@config)
      url = config["Host"] + config[pathname]
      formdata = OrcaDAS::FormData.new
      data = File.open(filename).read
      formdata.add_data(data, filename)
      #agreement = 0
      http_post(url, formdata.header, formdata.body, config){ |res|
        if res.code.to_i != 200
          raise res.code + " " + res.msg
        end
	#agreement = res["X-Das-Agreement"].to_i
      }
      STDERR.puts "UP #{filename}"
      formdata.close
      return true
    end

    def login_check(config=@config)
      url = config["Host"] + config["Path"]
      formdata = OrcaDAS::FormData.new
      agreement = 0
      http_post(url, formdata.header, formdata.body, config){ |res|
        if res.code.to_i != 200
          raise res.code + " " + res.msg
        end
	agreement = res["X-Das-Agreement"].to_i
      }
      if agreement == 0
        STDERR.puts "LOGIN NO AGREEMENT"
      elsif agreement == 1
        STDERR.puts "LOGIN OK"
      elsif agreement == 2
        STDERR.puts "LOGIN OK"
      else
        STDERR.puts "LOGIN UNKNOWN AGREEMENT"
      end
      return true
    end

    def server_check(config=@config)
      url = config["Host"] + "/"
      http_get(url, nil, config){ |res|
        if res.code.to_i != 200
          return false
        end
      }
      STDERR.puts "OK"
      return true
    end

    def run(pathname, filename, config=@config)
      return upload(pathname, filename, config)
    end

    def self.main(argv)
      num = 3
      logmessage = ""
      das = self.new
      if argv.length <= 0
        STDERR.puts "das-upload2.rb $file"
        exit 1
      end
      opt = argv.shift
      filename = argv.shift
      num = 3
      num.times{
        begin
          if opt == "-a"
            exit!(das.login_check ? 0 : 1)
          elsif opt == "-c"
            exit!(das.server_check ? 0 : 1)
          elsif opt == "-i"
            exit!(das.run("PathInf",filename) ? 0 : 1)
          end
        rescue Exception => ex
          if /^[0-9][0-9][0-9]/ =~ ex.message
              logmessage = "#{ex.message} (#{ex.class.name})"
          else
              logmessage = "999 #{ex.message} #{ex.backtrace}"
          end
        end
      }
      STDERR.puts logmessage
    end
  end
end

OrcaDAS::Command.main(ARGV) if $0 == __FILE__
