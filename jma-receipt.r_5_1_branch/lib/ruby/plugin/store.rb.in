require "yaml"
require "fileutils"
require "tempfile"
require "logger"
require "plugin"
require "plugin/util"

module JMA::Plugin
  class Store
    def initialize(config)
      @linkprefix = File.expand_path(config[:linkprefix])
      @root = File.expand_path(config[:root])
      defaultlog = Logger.new(STDOUT)
      defaultlog.level = Logger::DEBUG
      @log = config[:log] || defaultlog
      @log.debug("initialize...")
      if File.exist?(@root)
        @log.debug("found exist store:#{@root}")
        unless File.exist?(File.join(@root,"version"))
          File.open(File.join(@root,"version"),"w") {|io| 
            io.print JMA::Plugin::VERSION 
          }
        end
        version = File.read(File.join(@root,"version"))
        @log.debug("version:#{version}")
      else
        @log.debug("not found exist store")
        @log.debug("create store:#{@root},versioning:#{JMA::Plugin::VERSION}")
        FileUtils.mkdir_p(@root)
        File.open(File.join(@root,"version"),"w") {|io| io.print JMA::Plugin::VERSION }
      end
      unless File.exist?(@linkprefix)
        @log.debug("create linkprefix dir:#{@linkprefix}")
        FileUtils.mkdir_p(@linkprefix)
      end
      
      @cachedir = FileUtils.mkdir_p(File.join(@root,"cache"))
    end

    def install?(name,version)
      storedir = File.join(@root,"#{name}-#{version}") 
      Dir.exist?(storedir)
    end

    def install(name,version,path,action)
      @log.debug("install #{name}-#{version}")
      begin
        tmpdir = JMA::Plugin::Util::extract_tar(path)
        tmpstoredir = File.join(tmpdir,"#{name}-#{version}")
        raise "can not find contents" unless File.exist?(tmpstoredir)
        preinst = File.join(tmpstoredir,"meta","preinst")
        if File.exist?(preinst)
          @log.debug("exec #{preinst} #{action}")
          JMA::Plugin::Util::exec_script(preinst,name,version,action)
        end

        storedir = File.join(@root,"#{name}-#{version}") 
        FileUtils.rm_rf(storedir)
        # for ruby-1.8.5 FileUtils#mv bug
        #FileUtils.move(tmpstoredir,storedir)
        FileUtils.cp_r(tmpstoredir,@root)

        link = File.join(storedir,"meta","link")
        raise "link file not found:#{link}" unless File.exist?(link)
        dotlinked = File.join(storedir,".linked")
        #--# if !force && File.exist?(dotlinked) 
        if File.exist?(dotlinked) 
          raise "#{name}-#{version} already linked"
        end
        list = YAML.load(File.read(link))
        linked = []
        begin
          list.each{|l|
              from = File.join(storedir,l[0])
              to = File.expand_path(File.join(@linkprefix,l[1]))
              FileUtils.symlink(from,to,{:force=>true})
              to = File.join(to,File.basename(from)) if File.directory?(to)
              linked << to
          }
        rescue Exception => ex
          linked.each{|f| FileUtils.rm_f(f) }
          raise ex
        end
        FileUtils.touch(dotlinked)

        postinst = File.join(storedir,"meta","postinst")
        if File.exist?(postinst)
          @log.debug("exec #{postinst} #{action}")
          JMA::Plugin::Util::exec_script(postinst,name,version,action)
        end
      rescue Exception => ex
        @log.debug("install failed:#{ex}")
        FileUtils.rm_rf(storedir) if storedir
        raise ex
      ensure
        FileUtils.rm_rf(tmpdir) if tmpdir
      end
      @log.debug("install #{name}-#{version} end")
    end

    def uninstall(name, version,action)
      @log.debug("uninstall #{name}-#{version}")
      begin
        storedir = File.join(@root,"#{name}-#{version}") 
        raise "package #{name}-#{version} is not installed" unless File.exist?(storedir)
        prerm = File.join(storedir,"meta","prerm")
        _postrm = File.join(storedir,"meta","postrm")
        postrm = nil
        if File.exist?(_postrm)
          postrm = Tempfile.new("jma_plugin_postrm",Dir.tmpdir)
          postrm.write(File.read(_postrm))
          postrm.close
          FileUtils.chmod(0755,postrm.path)
        end

        link = File.join(storedir,"meta","link")
        raise "link file not found:#{link}" unless File.exist?(link)
        dotlinked = File.join(storedir,".linked")
        raise "#{name}-#{version} not linked" unless File.exist?(dotlinked)
        list = YAML.load(File.read(link))
        list.each{|l|
          begin
            to = File.expand_path(File.join(@linkprefix,l[1]))
            to = File.join(to,File.basename(l[0])) if File.ftype(to) == "directory"
            unless to.index(@linkprefix) == 0
              raise "invalid link #{l[0]} to #{l[1]}, over linkprefix violation"
            end
            FileUtils.rm_f(to)
          rescue Exception => ex
            next
          end
        }
        FileUtils.rm_f(dotlinked)

        if File.exist?(prerm)
          @log.debug("exec #{prerm} #{action}")
          JMA::Plugin::Util::exec_script(prerm,name,version,action)
        end

        FileUtils.rm_rf(storedir)
 
        if postrm
          @log.debug("exec #{postrm.path} #{action}")
          JMA::Plugin::Util::exec_script(postrm.path,name,version,action)
        end
      rescue Exception => ex
        @log.debug("uninstall failed:#{ex}")
        raise ex
      ensure
        postrm.close(true) if postrm
      end
      @log.debug("uninstall #{name}-#{version} end")
    end

    def link?(name,version)
      dotlinked = File.join(@root,"#{name}-#{version}",".linked")
      File.exist?(dotlinked) 
    end
 
    def link(name,version,action,force=false)
      @log.debug("link #{name}-#{version}")
      begin
        storedir = File.join(@root,"#{name}-#{version}") 
        raise "package #{name}-#{version} is not installed" unless File.exist?(storedir)
        prelink = File.join(storedir,"meta","prelink")
        if File.exist?(prelink)
          @log.debug("exec #{prelink} #{action}")
          JMA::Plugin::Util::exec_script(prelink,name,version,action)
        end
        postlink = File.join(storedir,"meta","postlink")
        if File.exist?(postlink)
          @log.debug("exec #{postlink} #{action}")
          JMA::Plugin::Util::exec_script(postlink,name,version,action) 
        end
      rescue Exception => ex
        @log.debug("link failed:#{ex}")
        raise ex
      end
      @log.debug("link #{name}-#{version} end")
    end

    def unlink(name,version,action)
      @log.debug("unlink #{name}-#{version}")
      begin
        storedir = File.join(@root,"#{name}-#{version}") 
        raise "package #{name}-#{version} is not installed" unless File.exist?(storedir)
        preunlink = File.join(storedir,"meta","preunlink")
        if File.exist?(preunlink)
          @log.debug("exec #{preunlink} #{action}")
          JMA::Plugin::Util::exec_script(preunlink,name,version,action)
        end
        postunlink = File.join(storedir,"meta","postunlink")
        if File.exist?(postunlink)
          @log.debug("exec #{postunlink} #{action}")
          JMA::Plugin::Util::exec_script(postunlink,name,version,action)
        end
      rescue Errno::ENOENT => ex
        @log.debug("unlink failed:${ex}")
        raise "#{name}-#{version} not linked"
      rescue Exception => ex
        @log.debug("unlink failed:#{ex}")
        raise ex
      end
      @log.debug("unlink #{name}-#{version} end")
    end

    def create_cache_file(fname,data)
      path = File.join(@cachedir,fname)
      FileUtils.rm_f(path) if File.exist?(path)
      File.open(path,"w"){|io|
        io.print(data)
      }
      return path
    end

    def list_file(name,version)
      @log.debug("list_file #{name}-#{version}")
      storedir = File.join(@root,"#{name}-#{version}") 
      raise "package #{name}-#{version} is not installed" unless File.exist?(storedir)
      list = Dir.glob(File.join(storedir,"**","*")).sort.select{|l| File.ftype(l) == "file"}
      @log.debug("list_file #{name}-#{version} end")
      return list
    end

    def list_link(name,version)
      @log.debug("list_link #{name}-#{version}")
      link_list = []
      begin
        storedir = File.join(@root,"#{name}-#{version}") 
        raise "package #{name}-#{version} is not installed" unless File.exist?(storedir)
        raise "package #{name}-#{version} is not linked" unless File.exist?(File.join(storedir,".linked"))
        link = File.join(storedir,"meta","link")
        raise "link file not found:#{link}" unless File.exist?(link)
        list = YAML.load(File.read(link))
        list.each{|l|
          to = File.expand_path(File.join(@linkprefix,l[1]))
          to = File.join(to,File.basename(l[0])) if File.ftype(to) == "directory"
          link_list << to
        }
        link_list.sort!
      rescue Exception => ex
        @log.debug("list_link failed:#{ex}")
        raise ex
      end
      @log.debug("list_link #{name}-#{version} end")
      return link_list
    end

    def clean_cache
      Dir.glob(File.join(@cachedir,"*")){|path| FileUtils.rm_f(path)}
    end

  end
end
